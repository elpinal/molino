
state 0
	$accept: .statements $end 
	statements: .    (1)

	IDENT  shift 6
	NUMBER  shift 5
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 13
	FALSE  shift 14
	-  shift 8
	(  shift 4
	[  shift 11
	{  shift 12
	.  reduce 1 (src line 60)

	statements  goto 1
	statement  goto 2
	expr  goto 3
	bool  goto 7

state 1
	$accept:  statements.$end 

	$end  accept
	.  error


state 2
	statements:  statement.statements 
	statements: .    (1)

	IDENT  shift 6
	NUMBER  shift 5
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 13
	FALSE  shift 14
	-  shift 8
	(  shift 4
	[  shift 11
	{  shift 12
	.  reduce 1 (src line 60)

	statements  goto 15
	statement  goto 2
	expr  goto 3
	bool  goto 7

state 3
	statement:  expr.    (3)

	.  reduce 3 (src line 76)


state 4
	statement:  (.VAR IDENT expr ) 
	statement:  (.IF expr expr ) 
	expr:  (.FN fns ) 
	expr:  (.FN args exprs ) 
	expr:  (.expr exprs ) 
	expr:  (.+ exprs ) 
	expr:  (.- exprs ) 
	expr:  (.* exprs ) 
	expr:  (./ exprs ) 
	expr:  (.% exprs ) 
	expr:  (.= exprs ) 

	IDENT  shift 6
	NUMBER  shift 5
	KEYWORD  shift 9
	STRING  shift 10
	VAR  shift 16
	IF  shift 17
	TRUE  shift 13
	FALSE  shift 14
	FN  shift 18
	+  shift 20
	-  shift 21
	*  shift 22
	/  shift 23
	%  shift 24
	(  shift 26
	[  shift 11
	{  shift 12
	=  shift 25
	.  error

	expr  goto 19
	bool  goto 7

state 5
	expr:  NUMBER.    (8)

	.  reduce 8 (src line 100)


state 6
	expr:  IDENT.    (9)

	.  reduce 9 (src line 104)


state 7
	expr:  bool.    (10)

	.  reduce 10 (src line 108)


state 8
	expr:  -.expr 

	IDENT  shift 6
	NUMBER  shift 5
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 13
	FALSE  shift 14
	-  shift 8
	(  shift 26
	[  shift 11
	{  shift 12
	.  error

	expr  goto 27
	bool  goto 7

state 9
	expr:  KEYWORD.    (12)

	.  reduce 12 (src line 116)


state 10
	expr:  STRING.    (13)

	.  reduce 13 (src line 120)


state 11
	expr:  [.exprs ] 
	exprs: .    (6)

	IDENT  shift 6
	NUMBER  shift 5
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 13
	FALSE  shift 14
	-  shift 8
	(  shift 26
	[  shift 11
	{  shift 12
	.  reduce 6 (src line 90)

	exprs  goto 28
	expr  goto 29
	bool  goto 7

state 12
	expr:  {.expr_pairs } 
	expr_pairs: .    (25)

	.  reduce 25 (src line 162)

	expr_pairs  goto 30

state 13
	bool:  TRUE.    (34)

	.  reduce 34 (src line 200)


state 14
	bool:  FALSE.    (35)

	.  reduce 35 (src line 203)


state 15
	statements:  statement statements.    (2)

	.  reduce 2 (src line 68)


state 16
	statement:  ( VAR.IDENT expr ) 

	IDENT  shift 31
	.  error


state 17
	statement:  ( IF.expr expr ) 

	IDENT  shift 6
	NUMBER  shift 5
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 13
	FALSE  shift 14
	-  shift 8
	(  shift 26
	[  shift 11
	{  shift 12
	.  error

	expr  goto 32
	bool  goto 7

state 18
	expr:  ( FN.fns ) 
	expr:  ( FN.args exprs ) 

	(  shift 37
	[  shift 36
	.  error

	fn  goto 35
	fns  goto 33
	args  goto 34

state 19
	expr:  ( expr.exprs ) 
	exprs: .    (6)

	IDENT  shift 6
	NUMBER  shift 5
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 13
	FALSE  shift 14
	-  shift 8
	(  shift 26
	[  shift 11
	{  shift 12
	.  reduce 6 (src line 90)

	exprs  goto 38
	expr  goto 29
	bool  goto 7

state 20
	expr:  ( +.exprs ) 
	exprs: .    (6)

	IDENT  shift 6
	NUMBER  shift 5
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 13
	FALSE  shift 14
	-  shift 8
	(  shift 26
	[  shift 11
	{  shift 12
	.  reduce 6 (src line 90)

	exprs  goto 39
	expr  goto 29
	bool  goto 7

state 21
	expr:  -.expr 
	expr:  ( -.exprs ) 
	exprs: .    (6)

	IDENT  shift 6
	NUMBER  shift 5
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 13
	FALSE  shift 14
	-  shift 8
	(  shift 26
	[  shift 11
	{  shift 12
	.  reduce 6 (src line 90)

	exprs  goto 41
	expr  goto 40
	bool  goto 7

state 22
	expr:  ( *.exprs ) 
	exprs: .    (6)

	IDENT  shift 6
	NUMBER  shift 5
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 13
	FALSE  shift 14
	-  shift 8
	(  shift 26
	[  shift 11
	{  shift 12
	.  reduce 6 (src line 90)

	exprs  goto 42
	expr  goto 29
	bool  goto 7

state 23
	expr:  ( /.exprs ) 
	exprs: .    (6)

	IDENT  shift 6
	NUMBER  shift 5
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 13
	FALSE  shift 14
	-  shift 8
	(  shift 26
	[  shift 11
	{  shift 12
	.  reduce 6 (src line 90)

	exprs  goto 43
	expr  goto 29
	bool  goto 7

state 24
	expr:  ( %.exprs ) 
	exprs: .    (6)

	IDENT  shift 6
	NUMBER  shift 5
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 13
	FALSE  shift 14
	-  shift 8
	(  shift 26
	[  shift 11
	{  shift 12
	.  reduce 6 (src line 90)

	exprs  goto 44
	expr  goto 29
	bool  goto 7

state 25
	expr:  ( =.exprs ) 
	exprs: .    (6)

	IDENT  shift 6
	NUMBER  shift 5
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 13
	FALSE  shift 14
	-  shift 8
	(  shift 26
	[  shift 11
	{  shift 12
	.  reduce 6 (src line 90)

	exprs  goto 45
	expr  goto 29
	bool  goto 7

state 26
	expr:  (.FN fns ) 
	expr:  (.FN args exprs ) 
	expr:  (.expr exprs ) 
	expr:  (.+ exprs ) 
	expr:  (.- exprs ) 
	expr:  (.* exprs ) 
	expr:  (./ exprs ) 
	expr:  (.% exprs ) 
	expr:  (.= exprs ) 

	IDENT  shift 6
	NUMBER  shift 5
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 13
	FALSE  shift 14
	FN  shift 18
	+  shift 20
	-  shift 21
	*  shift 22
	/  shift 23
	%  shift 24
	(  shift 26
	[  shift 11
	{  shift 12
	=  shift 25
	.  error

	expr  goto 19
	bool  goto 7

state 27
	expr:  - expr.    (11)

	.  reduce 11 (src line 112)


state 28
	expr:  [ exprs.] 

	]  shift 46
	.  error


state 29
	exprs:  expr.exprs 
	exprs: .    (6)

	IDENT  shift 6
	NUMBER  shift 5
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 13
	FALSE  shift 14
	-  shift 8
	(  shift 26
	[  shift 11
	{  shift 12
	.  reduce 6 (src line 90)

	exprs  goto 47
	expr  goto 29
	bool  goto 7

state 30
	expr:  { expr_pairs.} 
	expr_pairs:  expr_pairs.expr expr 

	IDENT  shift 6
	NUMBER  shift 5
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 13
	FALSE  shift 14
	-  shift 8
	(  shift 26
	[  shift 11
	{  shift 12
	}  shift 48
	.  error

	expr  goto 49
	bool  goto 7

state 31
	statement:  ( VAR IDENT.expr ) 

	IDENT  shift 6
	NUMBER  shift 5
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 13
	FALSE  shift 14
	-  shift 8
	(  shift 26
	[  shift 11
	{  shift 12
	.  error

	expr  goto 50
	bool  goto 7

state 32
	statement:  ( IF expr.expr ) 

	IDENT  shift 6
	NUMBER  shift 5
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 13
	FALSE  shift 14
	-  shift 8
	(  shift 26
	[  shift 11
	{  shift 12
	.  error

	expr  goto 51
	bool  goto 7

state 33
	expr:  ( FN fns.) 
	fns:  fns.fn 

	(  shift 37
	)  shift 52
	.  error

	fn  goto 53

state 34
	expr:  ( FN args.exprs ) 
	exprs: .    (6)

	IDENT  shift 6
	NUMBER  shift 5
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 13
	FALSE  shift 14
	-  shift 8
	(  shift 26
	[  shift 11
	{  shift 12
	.  reduce 6 (src line 90)

	exprs  goto 54
	expr  goto 29
	bool  goto 7

state 35
	fns:  fn.    (28)

	.  reduce 28 (src line 179)


state 36
	args:  [.idents ] 
	args:  [.idents & IDENT ] 
	idents: .    (32)

	.  reduce 32 (src line 195)

	idents  goto 55

state 37
	fn:  (.args exprs ) 

	[  shift 36
	.  error

	args  goto 56

state 38
	expr:  ( expr exprs.) 

	)  shift 57
	.  error


state 39
	expr:  ( + exprs.) 

	)  shift 58
	.  error


40: shift/reduce conflict (shift 6(0), red'n 11(3)) on IDENT
40: shift/reduce conflict (shift 5(0), red'n 11(3)) on NUMBER
40: shift/reduce conflict (shift 9(0), red'n 11(3)) on KEYWORD
40: shift/reduce conflict (shift 10(0), red'n 11(3)) on STRING
40: shift/reduce conflict (shift 13(0), red'n 11(3)) on TRUE
40: shift/reduce conflict (shift 14(0), red'n 11(3)) on FALSE
40: shift/reduce conflict (shift 26(0), red'n 11(3)) on (
40: shift/reduce conflict (shift 11(0), red'n 11(3)) on [
40: shift/reduce conflict (shift 12(0), red'n 11(3)) on {
 40: reduce/reduce conflict  (red'ns 11 and 6) on )
state 40
	exprs:  expr.exprs 
	expr:  - expr.    (11)
	exprs: .    (6)

	IDENT  shift 6
	NUMBER  shift 5
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 13
	FALSE  shift 14
	(  shift 26
	)  reduce 6 (src line 90)
	[  shift 11
	{  shift 12
	.  reduce 11 (src line 112)

	exprs  goto 47
	expr  goto 29
	bool  goto 7

state 41
	expr:  ( - exprs.) 

	)  shift 59
	.  error


state 42
	expr:  ( * exprs.) 

	)  shift 60
	.  error


state 43
	expr:  ( / exprs.) 

	)  shift 61
	.  error


state 44
	expr:  ( % exprs.) 

	)  shift 62
	.  error


state 45
	expr:  ( = exprs.) 

	)  shift 63
	.  error


state 46
	expr:  [ exprs ].    (14)

	.  reduce 14 (src line 124)


state 47
	exprs:  expr exprs.    (7)

	.  reduce 7 (src line 95)


state 48
	expr:  { expr_pairs }.    (15)

	.  reduce 15 (src line 128)


state 49
	expr_pairs:  expr_pairs expr.expr 

	IDENT  shift 6
	NUMBER  shift 5
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 13
	FALSE  shift 14
	-  shift 8
	(  shift 26
	[  shift 11
	{  shift 12
	.  error

	expr  goto 64
	bool  goto 7

state 50
	statement:  ( VAR IDENT expr.) 

	)  shift 65
	.  error


state 51
	statement:  ( IF expr expr.) 

	)  shift 66
	.  error


state 52
	expr:  ( FN fns ).    (16)

	.  reduce 16 (src line 132)


state 53
	fns:  fns fn.    (29)

	.  reduce 29 (src line 184)


state 54
	expr:  ( FN args exprs.) 

	)  shift 67
	.  error


state 55
	args:  [ idents.] 
	args:  [ idents.& IDENT ] 
	idents:  idents.IDENT 

	IDENT  shift 70
	]  shift 68
	&  shift 69
	.  error


state 56
	fn:  ( args.exprs ) 
	exprs: .    (6)

	IDENT  shift 6
	NUMBER  shift 5
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 13
	FALSE  shift 14
	-  shift 8
	(  shift 26
	[  shift 11
	{  shift 12
	.  reduce 6 (src line 90)

	exprs  goto 71
	expr  goto 29
	bool  goto 7

state 57
	expr:  ( expr exprs ).    (18)

	.  reduce 18 (src line 140)


state 58
	expr:  ( + exprs ).    (19)

	.  reduce 19 (src line 149)


state 59
	expr:  ( - exprs ).    (20)

	.  reduce 20 (src line 151)


state 60
	expr:  ( * exprs ).    (21)

	.  reduce 21 (src line 153)


state 61
	expr:  ( / exprs ).    (22)

	.  reduce 22 (src line 155)


state 62
	expr:  ( % exprs ).    (23)

	.  reduce 23 (src line 157)


state 63
	expr:  ( = exprs ).    (24)

	.  reduce 24 (src line 159)


state 64
	expr_pairs:  expr_pairs expr expr.    (26)

	.  reduce 26 (src line 167)


state 65
	statement:  ( VAR IDENT expr ).    (4)

	.  reduce 4 (src line 81)


state 66
	statement:  ( IF expr expr ).    (5)

	.  reduce 5 (src line 85)


state 67
	expr:  ( FN args exprs ).    (17)

	.  reduce 17 (src line 136)


state 68
	args:  [ idents ].    (30)

	.  reduce 30 (src line 189)


state 69
	args:  [ idents &.IDENT ] 

	IDENT  shift 72
	.  error


state 70
	idents:  idents IDENT.    (33)

	.  reduce 33 (src line 197)


state 71
	fn:  ( args exprs.) 

	)  shift 73
	.  error


state 72
	args:  [ idents & IDENT.] 

	]  shift 74
	.  error


state 73
	fn:  ( args exprs ).    (27)

	.  reduce 27 (src line 173)


state 74
	args:  [ idents & IDENT ].    (31)

	.  reduce 31 (src line 192)


26 terminals, 11 nonterminals
36 grammar rules, 75/2000 states
9 shift/reduce, 1 reduce/reduce conflicts reported
60 working sets used
memory: parser 70/30000
70 extra closures
257 shift entries, 2 exceptions
34 goto entries
33 entries saved by goto default
Optimizer space used: output 186/30000
186 table entries, 55 zero
maximum spread: 26, maximum offset: 56
