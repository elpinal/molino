
state 0
	$accept: .statements $end 
	statements: .    (1)

	IDENT  shift 5
	NUMBER  shift 4
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 14
	FALSE  shift 15
	NIL  shift 7
	-  shift 8
	[  shift 11
	{  shift 12
	(  shift 13
	.  reduce 1 (src line 60)

	statements  goto 1
	statement  goto 2
	expr  goto 3
	bool  goto 6

state 1
	$accept:  statements.$end 

	$end  accept
	.  error


state 2
	statements:  statement.statements 
	statements: .    (1)

	IDENT  shift 5
	NUMBER  shift 4
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 14
	FALSE  shift 15
	NIL  shift 7
	-  shift 8
	[  shift 11
	{  shift 12
	(  shift 13
	.  reduce 1 (src line 60)

	statements  goto 16
	statement  goto 2
	expr  goto 3
	bool  goto 6

state 3
	statement:  expr.    (3)

	.  reduce 3 (src line 76)


state 4
	expr:  NUMBER.    (6)

	.  reduce 6 (src line 92)


state 5
	expr:  IDENT.    (7)

	.  reduce 7 (src line 96)


state 6
	expr:  bool.    (8)

	.  reduce 8 (src line 100)


state 7
	expr:  NIL.    (9)

	.  reduce 9 (src line 104)


state 8
	expr:  -.expr 

	IDENT  shift 5
	NUMBER  shift 4
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 14
	FALSE  shift 15
	NIL  shift 7
	-  shift 8
	[  shift 11
	{  shift 12
	(  shift 13
	.  error

	expr  goto 17
	bool  goto 6

state 9
	expr:  KEYWORD.    (11)

	.  reduce 11 (src line 112)


state 10
	expr:  STRING.    (12)

	.  reduce 12 (src line 116)


state 11
	expr:  [.exprs ] 
	exprs: .    (4)

	IDENT  shift 5
	NUMBER  shift 4
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 14
	FALSE  shift 15
	NIL  shift 7
	-  shift 8
	[  shift 11
	{  shift 12
	(  shift 13
	.  reduce 4 (src line 82)

	exprs  goto 18
	expr  goto 19
	bool  goto 6

state 12
	expr:  {.expr_pairs } 
	expr_pairs: .    (27)

	.  reduce 27 (src line 165)

	expr_pairs  goto 20

state 13
	expr:  (.FN fns ) 
	expr:  (.FN args exprs ) 
	expr:  (.expr exprs ) 
	expr:  (.DEF IDENT expr ) 
	expr:  (.IF expr expr ) 
	expr:  (.IF expr expr expr ) 
	expr:  (.+ exprs ) 
	expr:  (.- exprs ) 
	expr:  (.* exprs ) 
	expr:  (./ exprs ) 
	expr:  (.% exprs ) 
	expr:  (.= exprs ) 

	IDENT  shift 5
	NUMBER  shift 4
	KEYWORD  shift 9
	STRING  shift 10
	DEF  shift 23
	IF  shift 24
	TRUE  shift 14
	FALSE  shift 15
	NIL  shift 7
	FN  shift 21
	+  shift 25
	-  shift 26
	*  shift 27
	/  shift 28
	%  shift 29
	[  shift 11
	{  shift 12
	(  shift 13
	=  shift 30
	.  error

	expr  goto 22
	bool  goto 6

state 14
	bool:  TRUE.    (36)

	.  reduce 36 (src line 203)


state 15
	bool:  FALSE.    (37)

	.  reduce 37 (src line 206)


state 16
	statements:  statement statements.    (2)

	.  reduce 2 (src line 68)


state 17
	expr:  - expr.    (10)

	.  reduce 10 (src line 108)


state 18
	expr:  [ exprs.] 

	]  shift 31
	.  error


state 19
	exprs:  expr.exprs 
	exprs: .    (4)

	IDENT  shift 5
	NUMBER  shift 4
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 14
	FALSE  shift 15
	NIL  shift 7
	-  shift 8
	[  shift 11
	{  shift 12
	(  shift 13
	.  reduce 4 (src line 82)

	exprs  goto 32
	expr  goto 19
	bool  goto 6

state 20
	expr:  { expr_pairs.} 
	expr_pairs:  expr_pairs.expr expr 

	IDENT  shift 5
	NUMBER  shift 4
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 14
	FALSE  shift 15
	NIL  shift 7
	-  shift 8
	[  shift 11
	{  shift 12
	}  shift 33
	(  shift 13
	.  error

	expr  goto 34
	bool  goto 6

state 21
	expr:  ( FN.fns ) 
	expr:  ( FN.args exprs ) 

	[  shift 38
	(  shift 39
	.  error

	fn  goto 37
	fns  goto 35
	args  goto 36

state 22
	expr:  ( expr.exprs ) 
	exprs: .    (4)

	IDENT  shift 5
	NUMBER  shift 4
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 14
	FALSE  shift 15
	NIL  shift 7
	-  shift 8
	[  shift 11
	{  shift 12
	(  shift 13
	.  reduce 4 (src line 82)

	exprs  goto 40
	expr  goto 19
	bool  goto 6

state 23
	expr:  ( DEF.IDENT expr ) 

	IDENT  shift 41
	.  error


state 24
	expr:  ( IF.expr expr ) 
	expr:  ( IF.expr expr expr ) 

	IDENT  shift 5
	NUMBER  shift 4
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 14
	FALSE  shift 15
	NIL  shift 7
	-  shift 8
	[  shift 11
	{  shift 12
	(  shift 13
	.  error

	expr  goto 42
	bool  goto 6

state 25
	expr:  ( +.exprs ) 
	exprs: .    (4)

	IDENT  shift 5
	NUMBER  shift 4
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 14
	FALSE  shift 15
	NIL  shift 7
	-  shift 8
	[  shift 11
	{  shift 12
	(  shift 13
	.  reduce 4 (src line 82)

	exprs  goto 43
	expr  goto 19
	bool  goto 6

state 26
	expr:  -.expr 
	expr:  ( -.exprs ) 
	exprs: .    (4)

	IDENT  shift 5
	NUMBER  shift 4
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 14
	FALSE  shift 15
	NIL  shift 7
	-  shift 8
	[  shift 11
	{  shift 12
	(  shift 13
	.  reduce 4 (src line 82)

	exprs  goto 45
	expr  goto 44
	bool  goto 6

state 27
	expr:  ( *.exprs ) 
	exprs: .    (4)

	IDENT  shift 5
	NUMBER  shift 4
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 14
	FALSE  shift 15
	NIL  shift 7
	-  shift 8
	[  shift 11
	{  shift 12
	(  shift 13
	.  reduce 4 (src line 82)

	exprs  goto 46
	expr  goto 19
	bool  goto 6

state 28
	expr:  ( /.exprs ) 
	exprs: .    (4)

	IDENT  shift 5
	NUMBER  shift 4
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 14
	FALSE  shift 15
	NIL  shift 7
	-  shift 8
	[  shift 11
	{  shift 12
	(  shift 13
	.  reduce 4 (src line 82)

	exprs  goto 47
	expr  goto 19
	bool  goto 6

state 29
	expr:  ( %.exprs ) 
	exprs: .    (4)

	IDENT  shift 5
	NUMBER  shift 4
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 14
	FALSE  shift 15
	NIL  shift 7
	-  shift 8
	[  shift 11
	{  shift 12
	(  shift 13
	.  reduce 4 (src line 82)

	exprs  goto 48
	expr  goto 19
	bool  goto 6

state 30
	expr:  ( =.exprs ) 
	exprs: .    (4)

	IDENT  shift 5
	NUMBER  shift 4
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 14
	FALSE  shift 15
	NIL  shift 7
	-  shift 8
	[  shift 11
	{  shift 12
	(  shift 13
	.  reduce 4 (src line 82)

	exprs  goto 49
	expr  goto 19
	bool  goto 6

state 31
	expr:  [ exprs ].    (13)

	.  reduce 13 (src line 120)


state 32
	exprs:  expr exprs.    (5)

	.  reduce 5 (src line 87)


state 33
	expr:  { expr_pairs }.    (14)

	.  reduce 14 (src line 124)


state 34
	expr_pairs:  expr_pairs expr.expr 

	IDENT  shift 5
	NUMBER  shift 4
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 14
	FALSE  shift 15
	NIL  shift 7
	-  shift 8
	[  shift 11
	{  shift 12
	(  shift 13
	.  error

	expr  goto 50
	bool  goto 6

state 35
	expr:  ( FN fns.) 
	fns:  fns.fn 

	(  shift 39
	)  shift 51
	.  error

	fn  goto 52

state 36
	expr:  ( FN args.exprs ) 
	exprs: .    (4)

	IDENT  shift 5
	NUMBER  shift 4
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 14
	FALSE  shift 15
	NIL  shift 7
	-  shift 8
	[  shift 11
	{  shift 12
	(  shift 13
	.  reduce 4 (src line 82)

	exprs  goto 53
	expr  goto 19
	bool  goto 6

state 37
	fns:  fn.    (30)

	.  reduce 30 (src line 182)


state 38
	args:  [.idents ] 
	args:  [.idents & IDENT ] 
	idents: .    (34)

	.  reduce 34 (src line 198)

	idents  goto 54

state 39
	fn:  (.args exprs ) 

	[  shift 38
	.  error

	args  goto 55

state 40
	expr:  ( expr exprs.) 

	)  shift 56
	.  error


state 41
	expr:  ( DEF IDENT.expr ) 

	IDENT  shift 5
	NUMBER  shift 4
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 14
	FALSE  shift 15
	NIL  shift 7
	-  shift 8
	[  shift 11
	{  shift 12
	(  shift 13
	.  error

	expr  goto 57
	bool  goto 6

state 42
	expr:  ( IF expr.expr ) 
	expr:  ( IF expr.expr expr ) 

	IDENT  shift 5
	NUMBER  shift 4
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 14
	FALSE  shift 15
	NIL  shift 7
	-  shift 8
	[  shift 11
	{  shift 12
	(  shift 13
	.  error

	expr  goto 58
	bool  goto 6

state 43
	expr:  ( + exprs.) 

	)  shift 59
	.  error


44: shift/reduce conflict (shift 5(0), red'n 10(3)) on IDENT
44: shift/reduce conflict (shift 4(0), red'n 10(3)) on NUMBER
44: shift/reduce conflict (shift 9(0), red'n 10(3)) on KEYWORD
44: shift/reduce conflict (shift 10(0), red'n 10(3)) on STRING
44: shift/reduce conflict (shift 14(0), red'n 10(3)) on TRUE
44: shift/reduce conflict (shift 15(0), red'n 10(3)) on FALSE
44: shift/reduce conflict (shift 7(0), red'n 10(3)) on NIL
44: shift/reduce conflict (shift 11(0), red'n 10(3)) on [
44: shift/reduce conflict (shift 12(0), red'n 10(3)) on {
44: shift/reduce conflict (shift 13(0), red'n 10(3)) on (
 44: reduce/reduce conflict  (red'ns 10 and 4) on )
state 44
	exprs:  expr.exprs 
	expr:  - expr.    (10)
	exprs: .    (4)

	IDENT  shift 5
	NUMBER  shift 4
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 14
	FALSE  shift 15
	NIL  shift 7
	[  shift 11
	{  shift 12
	(  shift 13
	)  reduce 4 (src line 82)
	.  reduce 10 (src line 108)

	exprs  goto 32
	expr  goto 19
	bool  goto 6

state 45
	expr:  ( - exprs.) 

	)  shift 60
	.  error


state 46
	expr:  ( * exprs.) 

	)  shift 61
	.  error


state 47
	expr:  ( / exprs.) 

	)  shift 62
	.  error


state 48
	expr:  ( % exprs.) 

	)  shift 63
	.  error


state 49
	expr:  ( = exprs.) 

	)  shift 64
	.  error


state 50
	expr_pairs:  expr_pairs expr expr.    (28)

	.  reduce 28 (src line 170)


state 51
	expr:  ( FN fns ).    (15)

	.  reduce 15 (src line 128)


state 52
	fns:  fns fn.    (31)

	.  reduce 31 (src line 187)


state 53
	expr:  ( FN args exprs.) 

	)  shift 65
	.  error


state 54
	args:  [ idents.] 
	args:  [ idents.& IDENT ] 
	idents:  idents.IDENT 

	IDENT  shift 68
	]  shift 66
	&  shift 67
	.  error


state 55
	fn:  ( args.exprs ) 
	exprs: .    (4)

	IDENT  shift 5
	NUMBER  shift 4
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 14
	FALSE  shift 15
	NIL  shift 7
	-  shift 8
	[  shift 11
	{  shift 12
	(  shift 13
	.  reduce 4 (src line 82)

	exprs  goto 69
	expr  goto 19
	bool  goto 6

state 56
	expr:  ( expr exprs ).    (17)

	.  reduce 17 (src line 136)


state 57
	expr:  ( DEF IDENT expr.) 

	)  shift 70
	.  error


state 58
	expr:  ( IF expr expr.) 
	expr:  ( IF expr expr.expr ) 

	IDENT  shift 5
	NUMBER  shift 4
	KEYWORD  shift 9
	STRING  shift 10
	TRUE  shift 14
	FALSE  shift 15
	NIL  shift 7
	-  shift 8
	[  shift 11
	{  shift 12
	(  shift 13
	)  shift 71
	.  error

	expr  goto 72
	bool  goto 6

state 59
	expr:  ( + exprs ).    (21)

	.  reduce 21 (src line 152)


state 60
	expr:  ( - exprs ).    (22)

	.  reduce 22 (src line 154)


state 61
	expr:  ( * exprs ).    (23)

	.  reduce 23 (src line 156)


state 62
	expr:  ( / exprs ).    (24)

	.  reduce 24 (src line 158)


state 63
	expr:  ( % exprs ).    (25)

	.  reduce 25 (src line 160)


state 64
	expr:  ( = exprs ).    (26)

	.  reduce 26 (src line 162)


state 65
	expr:  ( FN args exprs ).    (16)

	.  reduce 16 (src line 132)


state 66
	args:  [ idents ].    (32)

	.  reduce 32 (src line 192)


state 67
	args:  [ idents &.IDENT ] 

	IDENT  shift 73
	.  error


state 68
	idents:  idents IDENT.    (35)

	.  reduce 35 (src line 200)


state 69
	fn:  ( args exprs.) 

	)  shift 74
	.  error


state 70
	expr:  ( DEF IDENT expr ).    (18)

	.  reduce 18 (src line 140)


state 71
	expr:  ( IF expr expr ).    (19)

	.  reduce 19 (src line 144)


state 72
	expr:  ( IF expr expr expr.) 

	)  shift 75
	.  error


state 73
	args:  [ idents & IDENT.] 

	]  shift 76
	.  error


state 74
	fn:  ( args exprs ).    (29)

	.  reduce 29 (src line 176)


state 75
	expr:  ( IF expr expr expr ).    (20)

	.  reduce 20 (src line 148)


state 76
	args:  [ idents & IDENT ].    (33)

	.  reduce 33 (src line 195)


27 terminals, 11 nonterminals
38 grammar rules, 77/2000 states
10 shift/reduce, 1 reduce/reduce conflicts reported
60 working sets used
memory: parser 69/30000
56 extra closures
274 shift entries, 2 exceptions
34 goto entries
33 entries saved by goto default
Optimizer space used: output 175/30000
175 table entries, 54 zero
maximum spread: 27, maximum offset: 58
